{"name": "test_orange_login_DDT_002", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id\nStacktrace:\nBacktrace:\n\tGetHandleVerifier [0x00007FF668494A62+57106]\n\t(No symbol) [0x00007FF66840CF52]\n\t(No symbol) [0x00007FF6682DE17D]\n\t(No symbol) [0x00007FF66830C8CE]\n\t(No symbol) [0x00007FF6683368B2]\n\t(No symbol) [0x00007FF668332845]\n\t(No symbol) [0x00007FF668332160]\n\t(No symbol) [0x00007FF6682B4270]\n\tGetHandleVerifier [0x00007FF668744222+2873042]\n\tGetHandleVerifier [0x00007FF668796590+3209792]\n\tGetHandleVerifier [0x00007FF66878F3AF+3180639]\n\tGetHandleVerifier [0x00007FF668525F25+652245]\n\t(No symbol) [0x00007FF668418618]\n\t(No symbol) [0x00007FF6682B30EB]\n\tGetHandleVerifier [0x00007FF6687C43A8+3397720]\n\tBaseThreadInitThunk [0x00007FFF411A7614+20]\n\tRtlUserThreadStart [0x00007FFF412E26B1+33]", "trace": "self = <test_case.test_orange_ddt.Test_Orange_HRM_DDT object at 0x000001335CBCC950>\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"6e2ec46fef2aa614ceeed8abfa42c3a5\")>\n\n    def test_orange_login_DDT_002(self,setup):\n        self.log.info(\"test case test_orange_login_002 is start \")\n        self.driver = setup\n        self.log.info(\"open browser\")\n        self.lp=OrangeHRM(self.driver)\n        self.log.info(\"open url of orange Hrm \")\n        self.lp.OrgHRM_Url()\n        self.row = XLorg.RowCount(self.XLPath,\"Sheet1\")\n        self.log.info(\"total number of row \" + str(self.row))\n        Login_status_List = []\n    \n        for r in range (2,self.row+1):\n            self.user = XLorg.ReadData(self.XLPath,\"Sheet1\",r,2)\n            self.password = XLorg.ReadData(self.XLPath,\"Sheet1\",r,3)\n            self.exp_result = x=XLorg.ReadData(self.XLPath,\"Sheet1\",r ,4)\n            time.sleep(10)\n>           self.lp.OrgHRM_Url()\n\ntest_case\\test_orange_ddt.py:48: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npageLayout\\OrgHrm.py:19: in OrgHRM_Url\n    self.driver.get(\"https://opensource-demo.orangehrmlive.com/web/index.php/auth/login\")\nC:\\Users\\ADMIN\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:354: in get\n    self.execute(Command.GET, {\"url\": url})\nC:\\Users\\ADMIN\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001335CE99110>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"invalid session id\",\"message\":\"invalid session id\",\"stacktrace\":\"Backtrac...C43A8+3397720]\\\\n\\\\tBaseThreadInitThunk [0x00007FFF411A7614+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFF412E26B1+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id\nE       Stacktrace:\nE       Backtrace:\nE       \tGetHandleVerifier [0x00007FF668494A62+57106]\nE       \t(No symbol) [0x00007FF66840CF52]\nE       \t(No symbol) [0x00007FF6682DE17D]\nE       \t(No symbol) [0x00007FF66830C8CE]\nE       \t(No symbol) [0x00007FF6683368B2]\nE       \t(No symbol) [0x00007FF668332845]\nE       \t(No symbol) [0x00007FF668332160]\nE       \t(No symbol) [0x00007FF6682B4270]\nE       \tGetHandleVerifier [0x00007FF668744222+2873042]\nE       \tGetHandleVerifier [0x00007FF668796590+3209792]\nE       \tGetHandleVerifier [0x00007FF66878F3AF+3180639]\nE       \tGetHandleVerifier [0x00007FF668525F25+652245]\nE       \t(No symbol) [0x00007FF668418618]\nE       \t(No symbol) [0x00007FF6682B30EB]\nE       \tGetHandleVerifier [0x00007FF6687C43A8+3397720]\nE       \tBaseThreadInitThunk [0x00007FFF411A7614+20]\nE       \tRtlUserThreadStart [0x00007FFF412E26B1+33]\n\nC:\\Users\\ADMIN\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: InvalidSessionIdException"}, "attachments": [{"name": "log", "source": "61dc6071-38b3-4d34-97c1-feca7e9336b5-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "7ef68650-d936-4cbd-8c86-631174d57224-attachment.txt", "type": "text/plain"}], "start": 1691635611471, "stop": 1691635660723, "uuid": "a9ab04b7-0bec-429c-9804-95e6184dc71d", "historyId": "f6fda68a355a83c5a3bcab7028eae6a7", "testCaseId": "f6fda68a355a83c5a3bcab7028eae6a7", "fullName": "test_case.test_orange_ddt.Test_Orange_HRM_DDT#test_orange_login_DDT_002", "labels": [{"name": "parentSuite", "value": "test_case"}, {"name": "suite", "value": "test_orange_ddt"}, {"name": "subSuite", "value": "Test_Orange_HRM_DDT"}, {"name": "host", "value": "DESKTOP-CT5ISU8"}, {"name": "thread", "value": "4416-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_case.test_orange_ddt"}]}